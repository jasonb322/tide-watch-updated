{"version":3,"sources":["components/getData.js","components/Location.js","components/Tides.js","components/Temps.js","components/WindData.js","components/apiKeys.js","components/tideStyle.js","components/TideWatchApp.js","reportWebVitals.js","index.js"],"names":["getData","url","a","fetch","res","json","data","Location","useState","location","setLocation","name","setName","lat","setLat","long","setLong","setLocationData","metadata","id","useEffect","className","Tides","convertToTwoDigit","val","toString","formattedDate","date","Date","day","getDate","month","getMonth","getFullYear","dateFormatter","tideURL","tide1","setTide1","tide2","setTide2","tide3","setTide3","tide4","setTide4","currentDate","setCurrentDate","tide1Type","setTide1Type","tide2Type","setTide2Type","tide3Type","setTide3Type","tide4Type","setTide4Type","convertTideTimeTo12Hour","tide","tideTime","substring","length","hour","convertTideType","tideType","formatDate","y","m","d","Error","setTideData","catch","err","console","log","predictions","includes","Temps","waterTemp","setWaterTemp","airTemp","setAirTemp","getWaterTemp","v","getAirTemp","WindData","windDir","setWindDir","windSpeed","setWindSpeed","windDirArray","fetchWindData","windURL","Math","round","rawWindDir","windSectorIndex","displayWindDirAsString","TideDiv","styled","div","TideWatch","onClick","window","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","TideWatchApp","document","getElementById"],"mappings":"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","file":"static/js/main.96d4f0a4.chunk.js","sourcesContent":["// call data from API\nconst getData = async (url) => {\n  const res = await fetch(url)\n  const data = await res.json()\n  return data\n}\n\nexport default getData\n","import getData from './getData'\nimport { useState, useEffect } from 'react'\n\nconst Location = () => {\n\n  const waterTempURL = 'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?date=latest&station=8534720&product=water_temperature&datum=STND&time_zone=lst_ldt&units=english&format=json'\n\n  const [location, setLocation] = useState(0)\n  const [name, setName] = useState('')\n  const [lat, setLat] = useState(0.0)\n  const [long, setLong] = useState(0.0)\n\n  const setLocationData = async () => {\n    const data = await getData(waterTempURL)\n    setLocation(data.metadata.id)\n    setName(data.metadata['name'])\n    setLat(data.metadata['lat'])\n    setLong(data.metadata['lon'])\n  }\n\n  useEffect(() => {\n    setLocationData()\n  }, [])\n  \n\n  return (\n    <div className='location'>\n      <h1>{name}</h1>\n      <h2>Tides and Temps</h2>\n      <div className='locationStats'>\n        <h4>Lat: {lat}</h4>\n        <h4>Long: {long}</h4>\n        <h4>NOAA Station Id: {location}</h4>\n      </div>\n      \n    </div>\n  )\n}\n\nexport default Location\n","/* Control functionality of the tide API call and return formatted tide times */\n\nimport getData from \"./getData\"\nimport { useState, useEffect } from 'react'\n\nconst Tides = () => {\n\n\n  //===============================================================\n  //\n  // FORMAT URL FOR API REQUEST \n  //\n  //===============================================================\n\n  // tide info returned in format -> \"2021-06-11 08:58\",\n\n  // converts numbers to two digits (String type), example 1 = 01\n  // feeds into the automated URL for current date on API call\n  function convertToTwoDigit(val) {\n    if (val < 10) {\n      val = val.toString()\n      val = \"0\" + val\n    }\n    return val\n  }\n\n  // formats the current date (local time) to YYYYMMDD, for use in API call.\n  function dateFormatter() {\n    let date = new Date()\n    // console.log(date)\n\n    let day = date.getDate()\n    day = convertToTwoDigit(day)\n    // console.log(day)\n\n    let month = date.getMonth() + 1\n    month = convertToTwoDigit(month).toString()\n    // console.log(month)\n\n    const year = date.getFullYear()\n\n    const combined = year + month + day\n    return combined.toString()\n  }\n\n  // store the formatted date to var\n  const formattedDate = dateFormatter()\n\n  // interpolate the URL used for the tide call to the API\n  const tideURL = `https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?begin_date=${formattedDate}&range=48&station=8534720&product=predictions&datum=STND&time_zone=lst_ldt&interval=hilo&units=english&format=json`\n  // console.log(tideURL)\n\n  // TEST URL - See tide information returned from API ///////////////////////////////\n  // const testURL = 'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?begin_date=20210611&range=48&station=8534720&product=predictions&datum=STND&time_zone=lst_ldt&interval=hilo&units=english&format=json'\n  // console.log(testURL)\n\n\n\n  //===============================================================\n  //\n  // PREPARE TIDES FOR DISPLAY IN BROWSER\n  //\n  //===============================================================\n\n  const [tide1, setTide1] = useState('')\n  const [tide2, setTide2] = useState('')\n  const [tide3, setTide3] = useState('')\n  const [tide4, setTide4] = useState('')\n\n  const [currentDate, setCurrentDate] = useState('')\n\n  const [tide1Type, setTide1Type] = useState('')\n  const [tide2Type, setTide2Type] = useState('')\n  const [tide3Type, setTide3Type] = useState('')\n  const [tide4Type, setTide4Type] = useState('')\n\n  // convert the API's returned time to 12 hour time\n  function convertTideTimeTo12Hour(tide) {\n    let tideTime = tide.substring(tide.length - 5)\n    let hour = tideTime.substring(0, 2)\n\n    if (hour >= 12) {\n      if (hour > 12) {\n        hour -= 12\n      }\n      tideTime = hour + tideTime.substring(2)\n      return tideTime + \" PM\"\n    } else if (hour === '00') {\n        hour = '12'\n        tideTime = hour + tideTime.substring(2)\n        return tideTime + \" AM\"\n    } else {\n        return tideTime + \" AM\"\n    }\n  }\n\n  // convert the returned single letter tide type to \"low\" or \"high\"\n  function convertTideType(tideType) {\n    if (tideType === 'L') {\n      return 'Low: '\n    } else {\n      return 'High: '\n    }\n  }\n\n  // formatDate may be unecessary as the Date object may return 3-letter month, look into later to clean up code\n  // format current date\n  function formatDate(tide) {\n    const y = tide.substring(0, 4)\n    let m = tide.substring(5, 7)\n    const d = tide.substring(8, 10)\n    switch (m) {\n      case '01':\n        m = 'Jan'\n        break;\n      case '02':\n        m = 'Feb'\n        break;\n      case '03':\n        m = 'March'\n        break;\n      case '04':\n        m = 'April'\n        break;\n      case '05':\n        m = 'May'\n        break;\n      case '06':\n        m = 'June'\n        break;\n      case '07':\n        m = 'July'\n        break;\n      case '08':\n        m = 'Aug'\n        break;\n      case '09':\n        m = 'Sept'\n        break;\n      case '10':\n        m = 'Oct'\n        break;\n      case '11':\n        m = 'Nov'\n        break;\n      case '12':\n        m = 'Dec'\n        break;\n      default:\n        throw Error('Unable to format month.')\n    }\n    return m + \" \" + d + \", \" + y\n  }\n\n\n  //===============================================================\n  //\n  // DISPLAY TIDES IN BROWSER\n  //\n  //===============================================================\n\n  // set the tide data on the UI when API call is returned\n  const setTideData = async () => {\n    const data = await getData(tideURL)\n      .catch((err) => {\n        console.log(\"Unable to retrieve tide data from API server.\", err)\n      })\n\n    setTide1(convertTideTimeTo12Hour(data.predictions[0]['t']))\n    setTide2(convertTideTimeTo12Hour(data.predictions[1]['t']))\n    setTide3(convertTideTimeTo12Hour(data.predictions[2]['t']))\n    setTide4(convertTideTimeTo12Hour(data.predictions[3]['t']))\n\n    setCurrentDate(formatDate(data.predictions[0]['t']))\n\n    setTide1Type(convertTideType(data.predictions[0]['type']))\n    setTide2Type(convertTideType(data.predictions[1]['type']))\n    setTide3Type(convertTideType(data.predictions[2]['type']))\n    setTide4Type(convertTideType(data.predictions[3]['type']))\n  }\n\n  useEffect(() => {\n    setTideData()\n  })\n\n\n  return (\n    <div className='tides'>\n      <br />\n      <h2>{currentDate}</h2>\n      <h4>{tide1Type ? tide1Type : \"Loading . . . \"} {tide1}</h4>\n      <h4>{tide2Type} {tide2}</h4>\n      <h4>{tide3Type} {tide3}</h4>\n      <h4>{tide4.includes('AM') ? \"\": tide4Type + \" \" + tide4}</h4>\n    </div>\n  )\n}\n\nexport default Tides","import { useState, useEffect } from 'react'\nimport getData from './getData'\n\n\nconst Temps = () => {\n\n  // NOAA Tides and Currents API - Water Temp URL\n  const waterTempURL = 'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?date=latest&station=8534720&product=water_temperature&datum=STND&time_zone=lst_ldt&units=english&format=json'\n\n  // can't combine requests, URL for air temp\n  const airTempURL = 'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?date=latest&station=8534720&product=air_temperature&datum=STND&time_zone=lst_ldt&units=english&format=json'\n\n  const [waterTemp, setWaterTemp] = useState('')\n  const [airTemp, setAirTemp] = useState('')\n  \n  // call getData to set water temp\n  const getWaterTemp = async () => {\n    const data = await getData(waterTempURL)\n    setWaterTemp(data.data[0].v)\n  }\n\n  // call getData to set water temp\n  const getAirTemp = async () => {\n    const data = await getData(airTempURL)\n    setAirTemp(data.data[0].v)\n  }\n\n  // update values when page loads and whenever there is a change to water or air temps\n  useEffect(() => {\n    getWaterTemp()\n    getAirTemp()\n  }, [waterTemp, airTemp])\n\n  // display information on the page\n  return (\n    <div className='temps'>\n      <br />\n      <h4>Water: {waterTemp} ˚F</h4 >\n      <h4 className='air-temp'>Air: {airTemp} ˚F</h4 >\n    </div>\n  )\n}\n\nexport default Temps\n","import { useState, useEffect } from 'react'\nimport { openWeatherMapAPIKey } from './apiKeys'\nimport getData from './getData';\n\n\nconst WindData = () => {\n    const [windDir, setWindDir] = useState(0);\n    const [windSpeed, setWindSpeed] = useState(null);\n\n    // .length of windDirArray = 17\n    const windDirArray = [\"N\",\"NNE\",\"NE\",\"ENE\",\"E\",\"ESE\",\"SE\",\"SSE\",\"S\",\"SSW\",\"SW\",\"WSW\",\"W\",\"WNW\",\"NW\",\"NNW\",\"N\"]\n    \n\n    const displayWindDirAsString = (rawWindDir) => {\n        let windAsString = ''\n        const windSectorIndex = Math.round(rawWindDir/22.5)\n        if (rawWindDir < 1) {\n            windAsString = 'N'\n        } else {\n            windAsString = windDirArray[windSectorIndex]\n        }\n        return windAsString\n    }\n\n    const fetchWindData = async () => {\n\n        const lat = '39.3643'\n        const lon = '-74.4229'\n        const apiKey = openWeatherMapAPIKey\n\n        const windURL = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`\n\n        \n        const data = await getData(windURL)\n\n        setWindDir(data['current']['wind_deg'])\n        setWindSpeed(Math.round(data['current']['wind_speed']))\n\n        return data        \n    }\n\n    useEffect(() => {\n        fetchWindData().catch((err) => console.log(err))\n    }, [])\n\n    return (\n        <div>\n            <h4>Wind:</h4>\n            <h4>{ windDir ? displayWindDirAsString(windDir) : 'Data Not Available' } @ { windSpeed ? windSpeed : ''} mph</h4>\n        </div>\n    )\n}\n\nexport default WindData\n","export const openWeatherMapAPIKey = 'd14e405661cc62b63964fcd5b526f6d3'","/*\n**********************************************\nACTS AS STYLE SHEET FOR TIDEWATCH.JS\n**********************************************\n*/\n\nimport styled from 'styled-components'\n\n\nexport const TideDiv = styled.div`\n\n.tideBody {\n  font-family: 'Major Mono Display', monospace;\n  border-style: solid;\n  border-width: 5px;\n  border-radius: 1em;\n  margin: 20px auto;\n  padding: 0px 10px 20px 10px;\n  text-transform: lowercase;\n  max-width: 360px;\n  background-color: #b3d5ff;\n  color: #314763;\n}\n\n.refresh-button {\n  font-family: 'Major Mono Display', monospace;\n  font-weight: bold;\n  border-style: solid;\n  border-radius: 0.75em;\n  border-color: #314763;\n  padding: 0.85em;\n  text-transform: lowercase;\n  background-color: #d9e9ff;\n  max-width: 380px;\n  color: #314763;\n}\n\n.locationStats h4 {\n  margin: 0.1em;\n}\n\nh4 {\n  margin: 1em;\n}\n\n.location p {\n  margin: 0;\n}\n\n.air-temp {\n  padding-bottom: 20px;\n}\n\n.link {\n  margin-top: 15px;\n  padding: 5px;\n}\n`;\n\n\n\n\n\n\n","// Jason Bahr\n// May 10, 2021\n// This app will show you the tidal data for the Atlantic City NOAA station\n\nimport Location from './Location'\nimport Tides from './Tides'\nimport Temps from './Temps'\nimport WindData from './WindData'\nimport { TideDiv } from './tideStyle'\n\nfunction TideWatch() {\n\n  const pageRefresh = () => {\n    window.location.reload(false);\n  }\n\n  return (\n    <TideDiv>\n      <div className='tideBody'>\n        <Location />\n        <Tides className='tides' />\n        <Temps className='temps' />\n        <WindData />\n        <button className='refresh-button' onClick={pageRefresh}>Refresh</button>\n      </div>\n      \n    </TideDiv>\n  );\n}\n\nexport default TideWatch;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TideWatchApp from './components/TideWatchApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TideWatchApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}